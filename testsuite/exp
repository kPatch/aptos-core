#!/usr/bin/env python3

import argparse

import sys

from test_framework.shell import LocalShell
from test_framework.git import Git

from test_framework.logging import log, init_logging

APTOS_CORE_REPO = "https://github.com/aptos-labs/aptos-core.git"
DOCKER_RUST_BUILD_WORKFLOW_NAME = "workflow-run-docker-rust-build.yaml"
EXP_GIT_BRANCH_PREFIX = "exp/"

def try_push_new_branch(git: Git, current_branch: str, new_branch: str) -> None:
    if git.branch_exists(new_branch):
        log.info("Branch %s already exists. Overriding its local state.", new_branch)
        git.run(["branch", "-D", new_branch]).unwrap() # delete local branch    

    # create a new branch and push it to the remote
    log.info("Creating branch %s", new_branch)
    git.run(["checkout", "-b", new_branch]).unwrap()
    log.info("Pushing branch %s", new_branch)
    git.run(["push", "-f", "origin", new_branch]).unwrap()

    log.info("Successfully created new branch %s", new_branch)

    git.run(["checkout", current_branch]).unwrap() # switch back to the original branch

def main() -> None:
    init_logging(logger=log)
    shell = LocalShell()
    git = Git(shell)

    parser = argparse.ArgumentParser(description="Run tests")
    parser.add_argument(
        "--features",
        nargs="*",
        default=[],
        help="Cargo features to enable",
    )
    parser.add_argument(
        "--profile",
        default="release",
        help="Cargo profile to build",
    )
    parser.add_argument(
        "--build-addl-testing-images",
        action="store_true",
        help="Build additional testing images",
    )
    args = parser.parse_args()

    current_git_branch = git.branch()
    new_exp_git_branch = EXP_GIT_BRANCH_PREFIX + current_git_branch # the temporary branch to push to

    # ensure that the current git workspace is clean
    if not git.status():
        log.info("ERROR: Not synced with remote. Please push to a remote branch")
        uncommitted_files = git.run(["status", "--porcelain"]).unwrap().decode().strip()
        log.info("Uncommitted files:\n%s", uncommitted_files)
        sys.exit(1)

    # create a new branch and push it to the remote
    try:
        try_push_new_branch(git, current_git_branch, new_exp_git_branch)
    except Exception as e:
        log.info("ERROR: Failed to create exp branch %s: %s", new_exp_git_branch, e)
        sys.exit(1)

    if not git.branch_matches_remote(APTOS_CORE_REPO, current_git_branch):
        log.info("ERROR: Not synced with remote. Please push to a remote branch")
        log.info(
            "%s (local) != %s (remote)",
            git.get_commit_hash(current_git_branch),
            git.resolve_remote_ref(APTOS_CORE_REPO, current_git_branch),
        )
        sys.exit(1)

    git_sha = git.get_commit_hash("HEAD")
    features = ",".join(args.features)
    profile = args.profile
    build_addl_testing_images = (  # make it a lower case string
        str(args.build_addl_testing_images).lower()
        if type(args.build_addl_testing_images) is bool
        else args.build_addl_testing_images
    )

    log.info("GIT_SHA: %s", git_sha)
    log.info("FEATURES: %s", features)
    log.info("PROFILE: %s", profile)
    log.info("BUILD_ADDL_TESTING_IMAGES: %s", build_addl_testing_images)

    cmd = [
            "gh",
            "workflow",
            "run",
            DOCKER_RUST_BUILD_WORKFLOW_NAME,
            "--ref",
            new_exp_git_branch,
            "--field",
            f"GIT_SHA={git_sha}",
            "--field",
            f"FEATURES={features}",
            "--field",
            f"PROFILE={profile}",
            "--field",
            f"BUILD_ADDL_TESTING_IMAGES={build_addl_testing_images}",
        ]
    log.info("Running command: %s", " ".join(cmd))
    ret = shell.run(cmd, stream_output=True)

    # delete the remote branch
    log.info("Deleting remote branch %s", new_exp_git_branch)
    git.run(["push", "origin", "--delete", new_exp_git_branch]).unwrap()

    # print URL to find the jobs
    log.info(f"Workflow URL: https://github.com/aptos-labs/aptos-core/actions/workflows/{DOCKER_RUST_BUILD_WORKFLOW_NAME}")
    if ret.succeeded():
        log.info("Successfully triggered workflow")
    else:
        log.info("Failed to trigger workflow")
        sys.exit(1)


if __name__ == "__main__":
    main()
